// === Includes ===
#include <Servo.h>  // Include Servo library for obstacle scanning

// === Motor Driver Pins ===
const int ENA = 10, ENB = 11;  // PWM pins to control motor speed
const int IN1 = 5, IN2 = 6;    // Direction control for Motor A (left)
const int IN3 = 7, IN4 = 8;    // Direction control for Motor B (right)

// === IR Sensor Pins for Line Following ===
const int LEFT_SENSOR = 3;
const int RIGHT_SENSOR = 4;

// === Speed Settings ===
const int BASE_SPEED = 90;
const int TURN_SPEED = 70;
const int REVERSE_SPEED = 70;

// === IR Logic Settings ===
const bool LINE_DETECTED_STATE = false; // LOW = black line
const int LOOP_DELAY = 8;               // Main loop delay
const int SENSOR_READ_INTERVAL = 2;     // IR sensor read interval
const int SENSOR_SAMPLES = 3;           // IR filtering samples

// === Ultrasonic Sensor Pins & Threshold ===
const int TRIG_PIN = 13, ECHO_PIN = 12;
const int OBSTACLE_DISTANCE_THRESHOLD = 10; // cm

// === Servo for Scanning Left and Right ===
Servo myServo;  // Connected to pin 9

// === Timing & Filtering Variables ===
unsigned long lastSensorRead = 0, lastDebugPrint = 0;
const int DEBUG_INTERVAL = 200;

bool leftOnLine = false, rightOnLine = false;
bool rightSensorReliable = true;
unsigned long rightSensorLastDetected = 0;

int leftSensorHistory[SENSOR_SAMPLES] = {};
int rightSensorHistory[SENSOR_SAMPLES] = {};
int sampleIndex = 0;

// === Setup Function ===
void setup() {
  // Motor pin modes
  pinMode(ENA, OUTPUT); pinMode(ENB, OUTPUT);
  pinMode(IN1, OUTPUT); pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT); pinMode(IN4, OUTPUT);

  // IR sensor inputs
  pinMode(LEFT_SENSOR, INPUT);
  pinMode(RIGHT_SENSOR, INPUT);

  // Ultrasonic sensor pins
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Attach servo and center it
  myServo.attach(9);
  myServo.write(90);

  // Start Serial Monitor
  Serial.begin(9600);
  while (!Serial); // Wait for serial to be ready (UNO R4)
  Serial.println("LFR + Obstacle Avoidance Init");

  stopMotors(); // Safety stop
  delay(1000);
}

// === Main Loop ===
void loop() {
  unsigned long currentTime = millis();

  // --- Check for obstacle ---
  int distance = readDistance();
  if (distance > 0 && distance <= OBSTACLE_DISTANCE_THRESHOLD) {
    stopMotors(); delay(300);           // Stop briefly
    reverse(REVERSE_SPEED); delay(300); // Move backward
    stopMotors();

    // Scan right
    myServo.write(150); delay(500);
    int distRight = readDistance();

    // Scan left
    myServo.write(30); delay(500);
    int distLeft = readDistance();

    // Return to center
    myServo.write(90); delay(300);

    // Choose path with more space
    if (distLeft > distRight) {
      turnLeft(); delay(700);
      moveForward(BASE_SPEED, BASE_SPEED); delay(600);
      turnRight(); delay(700);
      moveForward(BASE_SPEED, BASE_SPEED); delay(600);
      turnRight(); delay(600);
    } else {
      turnRight(); delay(500);
      moveForward(BASE_SPEED, BASE_SPEED); delay(600);
      turnLeft(); delay(500);
      moveForward(BASE_SPEED, BASE_SPEED); delay(600);
      turnLeft(); delay(600);
    }

    stopMotors(); // End avoidance
    return;       // Skip rest of loop
  }

  // --- Read IR Sensors ---
  if (currentTime - lastSensorRead >= SENSOR_READ_INTERVAL) {
    readSensors();
    lastSensorRead = currentTime;
  }

  // --- Follow the Line ---
  executeLineFollowing();

  // --- Serial Debug Info ---
  if (currentTime - lastDebugPrint >= DEBUG_INTERVAL) {
    printDebugInfo();
    lastDebugPrint = currentTime;
  }

  delay(LOOP_DELAY);
}

// === IR Sensor Reading with Filtering ===
void readSensors() {
  int leftTotal = 0, rightTotal = 0;

  // Read each sensor 3 times for noise reduction
  for (int i = 0; i < 3; i++) {
    leftTotal += digitalRead(LEFT_SENSOR);
    rightTotal += digitalRead(RIGHT_SENSOR);
    delayMicroseconds(500);
  }

  // Majority voting
  bool leftRaw = (leftTotal >= 2);
  bool rightRaw = (rightTotal >= 2);

  // Save reading to history buffer
  leftSensorHistory[sampleIndex] = leftRaw;
  rightSensorHistory[sampleIndex] = rightRaw;

  // Calculate average over samples
  int leftSum = 0, rightSum = 0;
  for (int i = 0; i < SENSOR_SAMPLES; i++) {
    leftSum += leftSensorHistory[i];
    rightSum += rightSensorHistory[i];
  }

  // Filtered result
  leftOnLine = (leftSum >= (SENSOR_SAMPLES / 2 + 1)) == LINE_DETECTED_STATE;
  rightOnLine = (rightSum >= (SENSOR_SAMPLES / 2 + 1)) == LINE_DETECTED_STATE;

  // Update sensor reliability
  if (rightOnLine) {
    rightSensorLastDetected = millis();
    rightSensorReliable = true;
  } else if (millis() - rightSensorLastDetected > 5000) {
    rightSensorReliable = false;
  }

  sampleIndex = (sampleIndex + 1) % SENSOR_SAMPLES;
}

// === Line Following Behavior ===
void executeLineFollowing() {
  if (!leftOnLine && !rightOnLine)
    moveForward(BASE_SPEED, BASE_SPEED); // Default straight
  else if (leftOnLine && !rightOnLine)
    rightSensorReliable ? turnRight() : gentleTurnRight();
  else if (!leftOnLine && rightOnLine)
    turnLeft();
  else
    moveForward(BASE_SPEED * 0.6, BASE_SPEED * 0.6); // On both

  // Compensation if right sensor is faulty
  if (!rightSensorReliable && leftOnLine)
    moveForwardWithBias(BASE_SPEED, 0.8, 1.0);
}

// === Motor Control ===
void moveForward(int l, int r) {
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW); analogWrite(ENA, l);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW); analogWrite(ENB, r);
}

void reverse(int speed) {
  digitalWrite(IN1, LOW); digitalWrite(IN2, HIGH); analogWrite(ENA, speed);
  digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH); analogWrite(ENB, speed);
}

void stopMotors() {
  digitalWrite(IN1, LOW); digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW); digitalWrite(IN4, LOW);
  analogWrite(ENA, 0); analogWrite(ENB, 0);
}

void turnRight() {
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW); analogWrite(ENA, TURN_SPEED);
  digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH); analogWrite(ENB, TURN_SPEED);
}

void turnLeft() {
  digitalWrite(IN1, LOW); digitalWrite(IN2, HIGH); analogWrite(ENA, TURN_SPEED);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW); analogWrite(ENB, TURN_SPEED);
}

void gentleTurnRight() {
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW); analogWrite(ENA, BASE_SPEED);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW); analogWrite(ENB, BASE_SPEED * 0.3);
}

void moveForwardWithBias(int base, float lBias, float rBias) {
  moveForward(base * lBias, base * rBias);
}

// === Debug Information ===
void printDebugInfo() {
  Serial.print("L:"); Serial.print(leftOnLine ? "■" : "□");
  Serial.print(" R:"); Serial.print(rightOnLine ? "■" : "□");
  if (!rightSensorReliable) Serial.print(" [R-FAULT]");
  Serial.print(" | ");
  if (!leftOnLine && !rightOnLine) Serial.println("FORWARD");
  else if (leftOnLine && !rightOnLine) Serial.println(rightSensorReliable ? "TURN RIGHT" : "GENTLE RIGHT");
  else if (!leftOnLine && rightOnLine) Serial.println("TURN LEFT");
  else Serial.println("BOTH ON LINE");
}

// === Ultrasonic Distance Reading ===
int readDistance() {
  digitalWrite(TRIG_PIN, LOW); delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH); delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  return pulseIn(ECHO_PIN, HIGH) * 0.034 / 2; // Convert to cm
}
